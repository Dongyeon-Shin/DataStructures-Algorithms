namespace DataStructures_Algorithms
{
    internal class Program
    {
        // 자료구조 (DataStructure)
        // 프로그래밍에서 데이터를 효율적인 접근 및 수정을 가능케 하는 자료와 조직, 관리, 저장을 의미
        // 데이터 값의 모임, 또 데이터 간의 관계, 그리고 데이터에 적용할 수 있는 함수나 명령을 의미

        // 자료구조 형태
        // 선형구조: 자료 간 관계가 1대 1인 구조
        // 배열, 연결리스트, 스택, 큐, 덱
        // 비선형구조: 자료 간 관계가 1대 다 혹은 다 대 다인 구조
        // 트리, 그래프

        // 알고리즘과 자료구조 평가
        // 컴퓨터에서 알고리즘과 자료구조의 평가는 시간과 공간 두 자원을 얼마나 소모하는지가 효율성을 판단하는 중점
        // 평균적인 상황에서와 최악의 상황에서의 자원 소모량이 기준이 됨
        // 일반적으로 시간을 위해 공간이 희생되는 경우가 많음 그 이유는 통상적으로 메모리의 발전속도가 cpu의 발전속도보다 빠르기 때문이다. 
        // 시간복잡도: 알고리즘의 시간적 자원 소모량
        // 공간복잡도: 알고리즘의 공간적 자원 소모량

        // Big-O 표기법
        // 알고리즘의 복잡도를 나타내는 점근표기법
        // 가장 높은 차수의 계수와 나머지 모든 항을 제거하고 표기
        // 알고리즘의 대략적인 효율을 파악할 수 있는 수단 : 단순히 실행시간으로 평가하기에는 기기의성능같은 실행 환경마다 측정이 달라질 것이다.
        // ex)
        int Case1(int n)
        {
            int sum = 0;
            sum = n * n;
            return sum;
        }
        int Case2(int n)
        {
            int sum = 0;
            for (int i = 0; i < n; i++)
            {
                sum += n;
            }
            return sum;
        }
        int Case3(int n)
        {
            int sum = 0;
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    sum++;
                }
            }
            return sum;
        }
        // 입력값      Case1       Case2       Case3
        // n = 1          1           1           1
        // n = 10         1          10         100
        // n = 100        1         100      10,000
        // n = 1000       1       1,000   1,000,000
        // Big-O       0(1)        O(n)      O(n^2)
        // O(1) 가장우월한 알고리즘이라고 할 수 있다.
        //       이분법 업다운 게임처럼 절반만 실행할 수 있는 효율적인 방법
        // O(1)> O(logn) > O(n) > O(nlogn) > O(n^2) >  O(n^3) > O(2^n)
        //        효율 좋음                |지양해야 | 사용하지 않을 정도로 느려짐
        //                               하지만 필요하면 사용


        // 알고리즘 Algorithm
        // 문제를 해결하기 위해 정해진 진행절차나 방법.
        // 컴퓨터에서 알고리즘은 어떠한 행동을 하기 위해서 만들어진 프로그램 명령어의 집합.

        // 알고리즘의 조건
        // 입출력: 정해진 입력과 출력이 존재해야 한다.
        // 명확성: 각 단계마다 단순하고 모호하지 않아야 한다.
        // 유한성: 특성 수의 작업 이후에 정지해야 한다.
        // 효과성: 모든 과정은 수행 가능해야 한다.

        // 알고리즘의 성능
        // 정확성: 정확하게 동작하는가?
        // 단순성: 얼마나 단순한가?
        // 최적성: 더 이상 개선할 여지가없을 만큼 최적화되어 있는가?
        // 작업량: 얼마나 적은 연산을 수행하는가?
        // 메모리 사용량: 얼마나 적은 메모리를 사용하는가?
        static void Main(string[] args)
        {
            
        }
    }
}